DataTypesOperatorsDemo 
import java.util.Scanner; 
 
public class DataTypesOperatorsDemo { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        int choice; 
 
        do { 
            System.out.println("\nMenu:"); 
            System.out.println("1. Integer Data Type"); 
            System.out.println("2. Floating-Point Data Type"); 
            System.out.println("3. Character Data Type"); 
            System.out.println("4. Boolean Data Type"); 
            System.out.println("5. Arithmetic Operators"); 
            System.out.println("6. Relational Operators"); 
            System.out.println("7. Logical Operators"); 
            System.out.println("8. Exit"); 
            System.out.print("Enter your choice: "); 
            choice = scanner.nextInt(); 
 
            switch (choice) { 
                case 1: 
                    intExample(); 
                    break; 
                case 2: 
                    floatExample(); 
                    break; 
                case 3: 
                    charExample(); 
                    break; 
                case 4: 
                    booleanExample(); 
                    break; 
                case 5: 
                    arithmeticOperatorsExample(); 
                    break; 
                case 6: 
                    relationalOperatorsExample(); 
                    break; 
                case 7: 
                    logicalOperatorsExample(); 
                    break; 
                case 8: 
                    System.out.println("Exiting program."); 
                    break; 
                default: 
                    System.out.println("Invalid choice. Try again."); 
            } 
        } while (choice != 8); 
 
        scanner.close(); 
    } 
 
    // Examples for integer data type 
    public static void intExample() { 
        int num = 42; 
        System.out.println("Integer Example:"); 
        System.out.println("Value: " + num); 
        System.out.println("Size (in bits): " + Integer.SIZE); 
        System.out.println("Min Value: " + Integer.MIN_VALUE); 
        System.out.println("Max Value: " + Integer.MAX_VALUE); 
    } 
 
    // Examples for floating-point data type 
    public static void floatExample() { 
        float num = 3.14159f; 
        System.out.println("Floating-Point Example:"); 
        System.out.println("Value: " + num); 
        System.out.println("Size (in bits): " + Float.SIZE); 
        System.out.println("Min Value: " + Float.MIN_VALUE); 
        System.out.println("Max Value: " + Float.MAX_VALUE); 
    } 
 
    // Examples for character data type 
    public static void charExample() { 
        char ch = 'A'; 
        System.out.println("Character Example:"); 
        System.out.println("Value: " + ch); 
        System.out.println("Size (in bits): " + Character.SIZE); 
    } 
 
    // Examples for boolean data type 
    public static void booleanExample() { 
        boolean flag = true; 
        System.out.println("Boolean Example:"); 
        System.out.println("Value: " + flag); 
    } 
 
    // Examples for arithmetic operators 
    public static void arithmeticOperatorsExample() { 
        int a = 10, b = 4; 
        System.out.println("Arithmetic Operators Example:"); 
        System.out.println("Addition (a + b): " + (a + b)); 
        System.out.println("Subtraction (a - b): " + (a - b)); 
        System.out.println("Multiplication (a * b): " + (a * b)); 
        System.out.println("Division (a / b): " + (a / b)); 
        System.out.println("Modulus (a % b): " + (a % b)); 
    } 
 
    // Examples for relational operators 
    public static void relationalOperatorsExample() { 
        int x = 5, y = 8; 
        System.out.println("Relational Operators Example:"); 
        System.out.println("Equality (x == y): " + (x == y)); 
        System.out.println("Inequality (x != y): " + (x != y)); 
        System.out.println("Greater than (x > y): " + (x > y)); 
        System.out.println("Less than (x < y): " + (x < y)); 
        System.out.println("Greater than or equal (x >= y): " + (x >= y)); 
        System.out.println("Less than or equal (x <= y): " + (x <= y)); 
    } 
 
    // Examples for logical operators 
    public static void logicalOperatorsExample() { 
        boolean p = true, q = false; 
        System.out.println("Logical Operators Example:"); 
        System.out.println("Logical AND (p && q): " + (p && q)); 
        System.out.println("Logical OR (p || q): " + (p || q)); 
        System.out.println("Logical NOT (!p): " + (!p)); 
    } 
} 
 
 
 
ControlStatementMenu 
import java.util.Scanner; 
 
public class ControlStatementMenu { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        int choice; 
 
        do { 
            System.out.println("Control Statement Menu:"); 
            System.out.println("1. if-else statement"); 
            System.out.println("2. switch statement"); 
            System.out.println("3. for loop"); 
            System.out.println("4. while loop"); 
            System.out.println("5. Exit"); 
            System.out.print("Enter your choice: "); 
            choice = scanner.nextInt(); 
 
            switch (choice) { 
                case 1: 
                    ifElseStatementExample(scanner); 
                    break; 
                case 2: 
                    switchStatementExample(scanner); 
                    break; 
                case 3: 
                    forLoopExample(scanner); 
                    break; 
                case 4: 
                    whileLoopExample(scanner); 
                    break; 
                case 5: 
                    System.out.println("Exiting the program."); 
                    break; 
                default: 
                    System.out.println("Invalid choice. Please select a 
valid option."); 
                    break; 
            } 
        } while (choice != 5); 
 
        scanner.close(); 
    } 
 
    public static void ifElseStatementExample(Scanner scanner) { 
        System.out.print("Enter a number: "); 
        int number = scanner.nextInt(); 
 
        if (number % 2 == 0) { 
            System.out.println(number + " is even."); 
        } else { 
            System.out.println(number + " is odd."); 
        } 
    } 
 
    public static void switchStatementExample(Scanner scanner) { 
        System.out.print("Enter a day of the week (1-7): "); 
        int day = scanner.nextInt(); 
 
        String dayName; 
        switch (day) { 
            case 1: 
                dayName = "Sunday"; 
                break; 
            case 2: 
                dayName = "Monday"; 
                break; 
            case 3: 
                dayName = "Tuesday"; 
                break; 
            case 4: 
                dayName = "Wednesday"; 
                break; 
            case 5: 
                dayName = "Thursday"; 
                break; 
            case 6: 
                dayName = "Friday"; 
                break; 
            case 7: 
                dayName = "Saturday"; 
                break; 
            default: 
                dayName = "Invalid day"; 
        } 
 
        System.out.println("The day is " + dayName); 
    } 
 
    public static void forLoopExample(Scanner scanner) { 
        System.out.print("Enter a number: "); 
        int n = scanner.nextInt(); 
 
        for (int i = 1; i <= n; i++) { 
            System.out.print(i + " "); 
        } 
        System.out.println(); 
    } 
 
    public static void whileLoopExample(Scanner scanner) { 
        System.out.print("Enter a number: "); 
        int n = scanner.nextInt(); 
 
        int i = 1; 
        while (i <= n) { 
            System.out.print(i + " "); 
            i++; 
        } 
        System.out.println(); 
    } 
} 
 
 
 
Stack1 
import java.util.Scanner; 
 
class Stack { 
    int maxsize; 
    int top; 
    int[] StackArray; 
 
    public Stack(int size) { 
        maxsize = size; 
        StackArray = new int[maxsize]; 
        top = -1; 
    } 
 
    void push(int value) { 
        if (top < maxsize - 1) { 
            StackArray[++top] = value; 
            System.out.println("Push into the stack: " + value); 
        } else { 
            System.out.println("Stack is full"); 
        } 
    } 
 
    int pop() { 
        if (top >= 0) { 
            int value = StackArray[top--]; 
            System.out.println("Pop from the stack: " + value); 
            return value; 
        } else { 
            System.out.println("Stack is empty"); 
            return -1;  
        } 
    } 
 
    void display() { 
        if (top >= 0) { 
            System.out.println("Stack elements:"); 
            for (int i = 0; i <= top; i++) { 
                System.out.print(StackArray[i] + " "); 
            } 
            System.out.println(); 
        } else { 
            System.out.println("Stack is empty"); 
        } 
    } 
} 
 
public class Stack1 { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        System.out.println("Enter the size of the stack:"); 
        int size = sc.nextInt(); 
        Stack stack = new Stack(size); 
 
        while (true) { 
            System.out.println("Choose operation"); 
            System.out.println("1.Push"); 
            System.out.println("2.Pop"); 
            System.out.println("3.Display"); 
            System.out.println("4.Exit"); 
            int choice = sc.nextInt(); 
            switch (choice) { 
                case 1: 
                    System.out.println("Enter value to push"); 
                    int value = sc.nextInt(); 
                    stack.push(value); 
                    break; 
                case 2: 
                    int poppedValue = stack.pop(); 
                    if (poppedValue != -1) { 
                        System.out.println("Popped value: " + poppedValue); 
                    } 
                    break; 
                case 3: 
                    stack.display(); 
                    break; 
                case 4: 
                    System.out.println("Exit"); 
                    sc.close(); 
                    System.exit(0); 
                default: 
                    System.out.println("INVALID CHOICE!!"); 
            } 
        } 
    } 
} 
 
 
 
Queue1 
import java.util.Scanner; 
 
class Queue { 
    int[] arr; 
    int front, rear; 
    int size; 
 
    public Queue(int size) { 
        this.size = size; 
        arr = new int[size]; 
        front = -1; 
        rear = -1; 
    } 
 
    boolean isFull() { 
        return (rear == size - 1); 
    } 
 
    boolean isEmpty() { 
        return (front == -1); 
    } 
 
    void enQueue(int element) { 
        if (isFull()) { 
            System.out.println("Queue is full"); 
        } else { 
            if (front == -1) { 
                front = 0; 
            } 
            rear++; 
            arr[rear] = element; 
            System.out.println("Inserted " + element); 
        } 
    } 
 
    void deQueue() { 
        if (isEmpty()) { 
            System.out.println("Queue is empty"); 
        } else { 
            int element = arr[front]; 
            front++; 
            if (front > rear) { 
                front = -1; 
                rear = -1; 
            } 
            System.out.println("Deleted " + element); 
        } 
    } 
 
    void display() { 
        if (isEmpty()) { 
            System.out.println("Queue is empty"); 
        } else { 
            System.out.println("Queue:"); 
            for (int i = front; i <= rear; i++) { 
                System.out.println(arr[i] + ""); 
            } 
            System.out.println(); 
        } 
    } 
} 
 
public class Queue1 { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        System.out.println("Enter the size of the array"); 
        int size = sc.nextInt(); 
        Queue q = new Queue(size); 
 
        while (true) { 
            System.out.println("Enter your choice:"); 
            System.out.println("1. Enqueue"); 
            System.out.println("2. Dequeue"); 
            System.out.println("3. Display"); 
            System.out.println("4. Exit"); 
            int choice = sc.nextInt(); 
 
            switch (choice) { 
                case 1: 
                    System.out.println("Enter the value"); 
                    int value = sc.nextInt(); 
                    q.enQueue(value); 
                    break; 
                case 2: 
                    q.deQueue(); 
                    break; 
                case 3: 
                    q.display(); 
                    break; 
                case 4: 
                    System.out.println("Exiting"); 
                    sc.close(); 
                    System.exit(0); 
                default: 
                    System.out.println("Invalid choice!!"); 
            } 
        } 
    } 
} 
 
 
 
CircularQueue 
import java.util.Scanner; 
 
class CircularQ { 
    int size; 
    int[] arr; 
    int front, rear; 
 
    public CircularQ(int size) { 
        this.size = size; 
        arr = new int[size]; 
        front = -1; 
        rear = -1; 
    } 
 
    public boolean isFull() { 
        return (front == 0 && rear == size - 1) || (front == rear + 1); 
    } 
 
    public boolean isEmpty() { 
        return (front == -1); 
    } 
 
    void enQueue(int element) { 
        if (isFull()) { 
            System.out.println("Queue is full"); 
        } else { 
            if (front == -1) { 
                front = 0; 
            } 
            rear = (rear + 1) % size; 
            arr[rear] = element; 
            System.out.println("Inserted: " + element); 
        } 
    } 
 
    int deQueue() { 
        if (isEmpty()) { 
            System.out.println("Queue is empty"); 
            return -1;  
        } else { 
            int element = arr[front]; 
            if (front == rear) { 
                front = -1; 
                rear = -1; 
            } else { 
                front = (front + 1) % size; 
            } 
            return element; 
        } 
    } 
 
    void display() { 
        if (isEmpty()) { 
            System.out.println("Queue is empty"); 
        } else { 
            System.out.println("Queue:"); 
            int i = front; 
            do { 
                System.out.print(arr[i] + " "); 
                i = (i + 1) % size; 
            } while (i != (rear + 1) % size); 
            System.out.println();  
        } 
    } 
} 
 
public class CircularQueue { 
    public static void main(String[] args) { 
        Scanner sc = new Scanner(System.in); 
        System.out.println("Enter the size of the array"); 
        int size = sc.nextInt(); 
        CircularQ q = new CircularQ(size); 
 
        while (true) { 
            System.out.println("Enter your choice:"); 
            System.out.println("1. Enqueue"); 
            System.out.println("2. Dequeue"); 
            System.out.println("3. Display"); 
            System.out.println("4. Exit"); 
            int choice = sc.nextInt(); 
 
            switch (choice) { 
                case 1: 
                    System.out.println("Enter the value"); 
                    int value = sc.nextInt(); 
                    q.enQueue(value); 
                    break; 
                case 2: 
                    int removedValue = q.deQueue(); 
                    if (removedValue != -1) { 
                        System.out.println("Removed: " + removedValue); 
                    } 
                    break; 
                case 3: 
                    q.display(); 
                    break; 
                case 4: 
                    System.out.println("Exiting"); 
                    sc.close(); 
                    System.exit(0); 
                default: 
                    System.out.println("Invalid choice!!"); 
            } 
        } 
    } 
} 
 
 
 
BinarySearchTree 
import java.util.Scanner; 
 
class Node { 
    int key; 
    Node left, right; 
 
    public Node(int item) { 
        key = item; 
        left = right = null; 
    } 
} 
 
class BinarySearchTree { 
    Node root; 
 
    BinarySearchTree() { 
        root = null; 
    } 
 
    Node insert(Node node, int key) { 
        if (node == null) { 
            node = new Node(key); 
        } else if (key < node.key) { 
            node.left = insert(node.left, key); 
        } else if (key > node.key) { 
            node.right = insert(node.right, key); 
        } 
        return node; // Move this line to the end of the method 
    } 
 
    Node search(Node root, int key) { 
        if (root == null || root.key == key) 
            return root; 
        if (root.key < key) 
            return search(root.right, key); 
        return search(root.left, key); 
    } 
 
    Node minValueNode(Node node) { 
        Node current = node; 
        while (current.left != null) 
            current = current.left; 
        return current; 
    } 
 
    Node delete(Node root, int key) { 
        if (root == null) 
            return root; 
        if (key < root.key) 
            root.left = delete(root.left, key); 
        else if (key > root.key) 
            root.right = delete(root.right, key); 
        else { 
            if (root.left == null) 
                return root.right; 
            else if (root.right == null) 
                return root.left; 
            root.key = minValueNode(root.right).key; 
            root.right = delete(root.right, root.key); 
        } 
        return root; 
    } 
 
    void inorderTraversal(Node root) { 
        if (root != null) { 
            inorderTraversal(root.left); 
            System.out.print(root.key + " "); 
            inorderTraversal(root.right); 
        } 
    } 
 
    public static void main(String[] args) { 
        BinarySearchTree tree = new BinarySearchTree(); 
        Scanner scanner = new Scanner(System.in); 
        int choice, key; 
        do { 
            System.out.println("\nMenu:"); 
            System.out.println("1. Insert"); 
            System.out.println("2. Search"); 
            System.out.println("3. Delete"); 
            System.out.println("4. Inorder Traversal"); 
            System.out.println("5. Exit"); 
            System.out.print("Enter your choice: "); 
            choice = scanner.nextInt(); 
            switch (choice) { 
                case 1: 
                    System.out.print("Enter key to insert: "); 
                    key = scanner.nextInt(); 
                    tree.root = tree.insert(tree.root, key); 
                    break; 
                case 2: 
                    System.out.print("Enter key to search: "); 
                    key = scanner.nextInt(); 
                    Node searchResult = tree.search(tree.root, key); 
                    if (searchResult == null) 
                        System.out.println(key + " not found"); 
                    else 
                        System.out.println(key + " found"); 
                    break; 
                case 3: 
                    System.out.print("Enter key to delete: "); 
                    key = scanner.nextInt(); 
                    tree.root = tree.delete(tree.root, key); 
                    System.out.println(key + " deleted"); 
                    break; 
                case 4: 
                    System.out.println("Inorder Traversal:"); 
                    tree.inorderTraversal(tree.root); 
                    System.out.println(); 
                    break; 
                case 5: 
                    System.out.println("Exiting program."); 
                    break; 
                default: 
                    System.out.println("Invalid choice. Try again."); 
            } 
        } while (choice != 5); 
        scanner.close(); 
    } 
} 
 
 
 
BFS 
import java.util.LinkedList; 
import java.util.Queue; 
import java.util.Scanner; 
 
class BFS { 
    private int V; 
    private LinkedList<Integer> adj[]; 
 
    BFS(int v) { 
        V = v; 
        adj = new LinkedList[v]; 
        for (int i = 0; i < v; ++i) 
            adj[i] = new LinkedList<>(); 
    } 
 
    void addEdge(int v, int w) { 
        adj[v - 1].add(w - 1); 
    } 
 
    void BFS(int s) { 
        boolean visited[] = new boolean[V]; 
        Queue<Integer> queue = new LinkedList<>(); 
        visited[s] = true; 
        queue.add(s); 
        while (!queue.isEmpty()) { 
            s = queue.poll(); 
            System.out.print(s + " "); 
            for (int n : adj[s]) { 
                if (!visited[n]) { 
                    visited[n] = true; 
                    queue.add(n); 
                } 
            } 
        } 
    } 
    public static void main(String args[]) { 
        Scanner scanner = new Scanner(System.in); 
        System.out.print("Enter the number of vertices: "); 
        int numVertices = scanner.nextInt(); 
        BFS g = new BFS(numVertices); 
        int choice; 
        do { 
            System.out.println("\nMenu:"); 
            System.out.println("1. Add an Edge"); 
            System.out.println("2. Perform BFS Traversal"); 
            System.out.println("3. Exit"); 
            System.out.print("Enter your choice: "); 
            choice = scanner.nextInt(); 
            switch (choice) { 
                case 1: 
                    System.out.print("Enter source vertex: "); 
                    int src = scanner.nextInt(); 
                    System.out.print("Enter destination vertex: "); 
                    int dest = scanner.nextInt(); 
                    g.addEdge(src, dest); 
                    break; 
                case 2: 
                    System.out.print("Enter the starting vertex for BFS: "); 
                    int startVertex = scanner.nextInt(); 
                    System.out.println("Breadth First Traversal:"); 
                    g.BFS(startVertex - 1); // Corrected the starting vertex 
                    break; 
                case 3: 
                    System.out.println("Exiting..."); 
                    break; 
                default: 
                    System.out.println("Invalid choice. Please try again."); 
            } 
        } while (choice != 3); 
        scanner.close(); 
    } 
} 
 
 
 
DFSMenuDriven 
import java.util.*; 
 
class Graph { 
    private int V;  
    private LinkedList<Integer>[] adj;  
 
    @SuppressWarnings("unchecked") 
    public Graph(int vertices) { 
        V = vertices; 
        adj = new LinkedList[V]; 
        for (int i = 0; i < V; i++) { 
            adj[i] = new LinkedList<>(); 
        } 
    } 
 
    public void addEdge(int v, int w) { 
        adj[v].add(w); 
    } 
 
    public void DFS(int start) { 
        boolean[] visited = new boolean[V]; 
        System.out.println("Depth-First Search starting from vertex " + 
start + ":"); 
        DFSUtil(start, visited); 
    } 
 
    private void DFSUtil(int v, boolean[] visited) { 
        visited[v] = true; 
        System.out.print(v + " "); 
 
        for (int neighbor : adj[v]) { 
            if (!visited[neighbor]) { 
                DFSUtil(neighbor, visited); 
            } 
        } 
    } 
} 
 
public class DFSMenuDriven { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
 
        System.out.print("Enter the number of vertices: "); 
        int vertices = scanner.nextInt(); 
        Graph graph = new Graph(vertices); 
 
        int choice; 
        do { 
            System.out.println("\nMenu:"); 
            System.out.println("1. Add an Edge"); 
            System.out.println("2. Perform DFS"); 
            System.out.println("3. Exit"); 
            System.out.print("Enter your choice: "); 
            choice = scanner.nextInt(); 
 
            switch (choice) { 
                case 1: 
                    System.out.print("Enter source vertex: "); 
                    int source = scanner.nextInt(); 
                    System.out.print("Enter destination vertex: "); 
                    int destination = scanner.nextInt(); 
                    graph.addEdge(source, destination); 
                    break; 
                case 2: 
                    System.out.print("Enter the starting vertex for DFS: "); 
                    int startVertex = scanner.nextInt(); 
                    graph.DFS(startVertex); 
                    System.out.println(); 
                    break; 
                case 3: 
                    System.out.println("Exiting program."); 
                    break; 
                default: 
                    System.out.println("Invalid choice. Try again."); 
            } 
        } while (choice != 3); 
 
        scanner.close(); 
    } 
} 
 
 
 
SinglyLinkedListMenu 
import java.util.Scanner; 
 
class Node { 
    int data; 
    Node next; 
 
    public Node(int data) { 
        this.data = data; 
        this.next = null; 
    } 
} 
 
class SinglyLinkedList { 
    Node head; 
 
    public SinglyLinkedList() { 
        head = null; 
    } 
 
    public void insertAtBeginning(int data) { 
        Node newNode = new Node(data); 
        if (head == null) { 
            head = newNode; 
        } else { 
            newNode.next = head; 
            head = newNode; 
        } 
    } 
 
    public void delete(int data) { 
        if (head == null) { 
            System.out.println("List is empty. Nothing to delete."); 
            return; 
        } 
 
        if (head.data == data) { 
            head = head.next; 
            System.out.println("Element deleted from the list."); 
            return; 
        } 
 
        Node current = head; 
        while (current.next != null) { 
            if (current.next.data == data) { 
                current.next = current.next.next; 
                System.out.println("Element deleted from the list."); 
                return; 
            } 
            current = current.next; 
        } 
 
        System.out.println("Element not found in the list."); 
    } 
 
    public void display() { 
        Node current = head; 
        System.out.print("Singly Linked List: "); 
        while (current != null) { 
            System.out.print(current.data + " -> "); 
            current = current.next; 
        } 
        System.out.println("null"); 
    } 
} 
 
public class SinglyLinkedListMenu { 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        SinglyLinkedList list = new SinglyLinkedList(); 
 
        while (true) { 
            System.out.println("\nMenu:"); 
            System.out.println("1. Insert at the beginning"); 
            System.out.println("2. Delete an element"); 
            System.out.println("3. Display the list"); 
            System.out.println("4. Exit"); 
            System.out.print("Enter your choice: "); 
            int choice = scanner.nextInt(); 
 
            switch (choice) { 
                case 1: 
                    System.out.print("Enter data to insert: "); 
                    int data = scanner.nextInt(); 
                    list.insertAtBeginning(data); 
                    System.out.println("Element inserted at the 
beginning."); 
                    break; 
                case 2: 
                    System.out.print("Enter data to delete: "); 
                    int dataToDelete = scanner.nextInt(); 
                    list.delete(dataToDelete); 
                    break; 
                case 3: 
                    list.display(); 
                    break; 
                case 4: 
                    System.out.println("Exiting the program."); 
                    scanner.close(); 
                    System.exit(0); 
                default: 
                    System.out.println("Invalid choice. Please try again."); 
            } 
        } 
    } 
} 
 
 
 
 
DOUBLY LINKED LIST(NOT MENU DRIVEN) 
Develop a code to implement doubly linked list. 
public class DoublyLinkedList { 
 //Represent a node of the doubly linked list 
 class Node{ 
 int data; 
 Node previous; 
 Node next; 
 public Node(int data) { 
 this.data = data; 
 } 
 } 
//Represent the head and tail of the doubly linked list 
Node head, tail = null; 
//addNode() will add a node to the list 
public void addNode(int data) { 
//Create a new node 
Node newNode = new Node(data); 
//If list is empty 
if(head == null) { 
//Both head and tail will point to newNode 
head = tail = newNode; 
//head's previous will point to null 
head.previous = null; 
//tail's next will point to null, as it is the last node of the list 
tail.next = null; 
} 
else { 
//newNode will be added after tail such that tail's next will point to newNode 
tail.next = newNode; 
//newNode's previous will point to tail 
newNode.previous = tail; 
//newNode will become new tail 
tail = newNode; 
//As it is last node, tail's next will point to null 
tail.next = null; 
} 
} 
//display() will print out the nodes of the list 
public void display() { 
//Node current will point to head 
Node current = head; 
if(head == null) { 
System.out.println("List is empty"); 
return; 
} 
System.out.println("Nodes of doubly linked list: "); 
while(current != null) { 
//Prints each node by incrementing the pointer. 
System.out.print(current.data + " "); 
current = current.next; 
} 
} 
public static void main(String[] args) { 
DoublyLinkedList dList = new DoublyLinkedList(); 
//Add nodes to the list 
dList.addNode(1); 
dList.addNode(2); 
dList.addNode(3); 
//Displays the nodes present in the list 
dList.display(); 
} } 
AVLTree(insert and display) 
import java.util.Scanner; 
class TreeNode { 
int data; 
TreeNode left; 
TreeNode right; 
int height; 
public TreeNode(int data) { 
this.data = data; 
this.left = null; 
this.right = null; 
        this.height = 1; 
    } 
} 
 
public class AVLTree { 
    private TreeNode root; 
 
    public AVLTree() { 
        root = null; 
    } 
 
    public int height(TreeNode node) { 
        if (node == null) { 
            return 0; 
        } 
        return node.height; 
    } 
 
    public int getBalanceFactor(TreeNode node) { 
        if (node == null) { 
            return 0; 
        } 
        return height(node.left) - height(node.right); 
    } 
 
    public TreeNode rotateRight(TreeNode y) { 
        TreeNode x = y.left; 
        TreeNode T2 = x.right; 
 
        x.right = y; 
        y.left = T2; 
 
        y.height = Math.max(height(y.left), height(y.right)) + 1; 
        x.height = Math.max(height(x.left), height(x.right)) + 1; 
 
        return x; 
    } 
 
    public TreeNode rotateLeft(TreeNode x) { 
        TreeNode y = x.right; 
        TreeNode T2 = y.left; 
 
        y.left = x; 
        x.right = T2; 
 
        x.height = Math.max(height(x.left), height(x.right)) + 1; 
        y.height = Math.max(height(y.left), height(y.right)) + 1; 
 
        return y; 
    } 
 
    public TreeNode insert(TreeNode node, int data) { 
        if (node == null) { 
            return new TreeNode(data); 
        } 
 
        if (data < node.data) { 
            node.left = insert(node.left, data); 
        } else if (data > node.data) { 
            node.right = insert(node.right, data); 
        } else { 
            return node; // Duplicate values are not allowed 
        } 
 
        node.height = 1 + Math.max(height(node.left), 
height(node.right)); 
 
        int balance = getBalanceFactor(node); 
 
        if (balance > 1) { 
            if (data < node.left.data) { 
                return rotateRight(node); 
            } else { 
                node.left = rotateLeft(node.left); 
                return rotateRight(node); 
            } 
        } 
 
        if (balance < -1) { 
            if (data > node.right.data) { 
                return rotateLeft(node); 
            } else { 
                node.right = rotateRight(node.right); 
                return rotateLeft(node); 
            } 
        } 
 
        return node; 
    } 
 
    public void insert(int data) { 
        root = insert(root, data); 
    } 
 
    public void display() { 
        System.out.println("AVL Tree (Inorder Traversal):"); 
        inOrder(root); 
        System.out.println(); 
    } 
 
    private void inOrder(TreeNode node) { 
        if (node != null) { 
            inOrder(node.left); 
            System.out.print(node.data + " "); 
            inOrder(node.right); 
        } 
    } 
 
    public static void main(String[] args) { 
        Scanner scanner = new Scanner(System.in); 
        AVLTree avlTree = new AVLTree(); 
 
        while (true) { 
            System.out.println("\nMenu:"); 
            System.out.println("1. Insert an element"); 
            System.out.println("2. Display AVL Tree"); 
            System.out.println("3. Exit"); 
            System.out.print("Enter your choice: "); 
            int choice = scanner.nextInt(); 
 
            switch (choice) { 
                case 1: 
System.out.print("Enter data to insert: "); 
int data = scanner.nextInt(); 
avlTree.insert(data); 
System.out.println("Element inserted."); 
break; 
case 2: 
avlTree.display(); 
break; 
case 3: 
System.out.println("Exiting the program."); 
scanner.close(); 
System.exit(0); 
default: 
System.out.println("Invalid choice. Please try 
again."); 
} 
} 
} 
} 
AVL TREE MENU DRIVEN (INSERT, DELETE, PRE ORDER, POST ORDER, INORDER) 
import java.util.Scanner; 
class AVLNode { 
int data, height; 
AVLNode left, right; 
public AVLNode(int data) { 
this.data = data; 
height = 1; 
}} 
class AVLTree { 
AVLNode root; 
int height(AVLNode node) { 
if (node == null) 
return 0; 
return node.height; 
} 
int max(int a, int b) { 
return (a > b) ? a : b; 
} 
AVLNode rightRotate(AVLNode y) { 
AVLNode x = y.left; 
AVLNode T2 = x.right; 
x.right = y; 
y.left = T2; 
y.height = max(height(y.left), height(y.right)) + 1; 
x.height = max(height(x.left), height(x.right)) + 1; 
return x; 
} 
AVLNode leftRotate(AVLNode x) { 
AVLNode y = x.right; 
AVLNode T2 = y.left; 
y.left = x; 
x.right = T2; 
x.height = max(height(x.left), height(x.right)) + 1; 
y.height = max(height(y.left), height(y.right)) + 1; 
return y; 
} 
int getBalance(AVLNode node) { 
if (node == null) 
return 0; 
return height(node.left) - height(node.right); 
} 
AVLNode insert(AVLNode node, int data) { 
if (node == null) 
return (new AVLNode(data)); 
if (data < node.data) 
node.left = insert(node.left, data); 
else if (data > node.data) 
node.right = insert(node.right, data); 
else 
return node; 
node.height = 1 + max(height(node.left), height(node.right)); 
int balance = getBalance(node); 
if (balance > 1 && data < node.left.data) 
return rightRotate(node); 
if (balance < -1 && data > node.right.data) 
return leftRotate(node); 
if (balance > 1 && data > node.left.data) { 
node.left = leftRotate(node.left); 
return rightRotate(node); 
} 
if (balance < -1 && data < node.right.data) { 
node.right = rightRotate(node.right); 
return leftRotate(node); 
} 
return node; 
} 
AVLNode minValueNode(AVLNode node) { 
AVLNode current = node; 
while (current.left != null) 
current = current.left; 
return current; 
} 
AVLNode deleteNode(AVLNode root, int data) { 
if (root == null) 
return root; 
if (data < root.data) 
root.left = deleteNode(root.left, data); 
else if (data > root.data) 
root.right = deleteNode(root.right, data); 
else { 
if ((root.left == null) || (root.right == null)) { 
AVLNode temp = null; 
if (temp == root.left) 
temp = root.right; 
else 
temp = root.left; 
if (temp == null) { 
temp = root; 
root = null; 
} else 
root = temp; 
} else { 
AVLNode temp = minValueNode(root.right); 
root.data = temp.data; 
root.right = deleteNode(root.right, temp.data); 
}} 
if (root == null) 
return root; 
root.height = max(height(root.left), height(root.right)) + 1; 
int balance = getBalance(root); 
if (balance > 1 && getBalance(root.left) >= 0) 
return rightRotate(root); 
if (balance > 1 && getBalance(root.left) < 0) { 
root.left = leftRotate(root.left); 
return rightRotate(root); 
} 
if (balance < -1 && getBalance(root.right) <= 0) 
return leftRotate(root); 
if (balance < -1 && getBalance(root.right) > 0) { 
root.right = rightRotate(root.right); 
return leftRotate(root); 
} 
return root; 
} 
void preOrder(AVLNode node) { 
if (node != null) { 
System.out.print(node.data + " "); 
preOrder(node.left); 
preOrder(node.right); 
}} 
void inOrder(AVLNode node) { 
if (node != null) { 
inOrder(node.left); 
System.out.print(node.data + " "); 
inOrder(node.right); 
}} 
void postOrder(AVLNode node) { 
if (node != null) { 
postOrder(node.left); 
postOrder(node.right); 
System.out.print(node.data + " "); 
} } 
public static void main(String[] args) { 
Scanner snScanner = new Scanner(System.in); 
AVLTree tree = new AVLTree(); 
while (true) { 
int choice; 
System.out.println("1. Insert"); 
System.out.println("2. Delete"); 
System.out.println("3. Preorder Traversal"); 
System.out.println("4. Inorder Traversal"); 
System.out.println("5. Postorder Traversal"); 
System.out.println("6. Exit"); 
System.out.println("Enter your choice:"); 
choice = snScanner.nextInt(); 
switch (choice) { 
case 1: 
System.out.println("Enter the element to be inserted:"); 
int data = snScanner.nextInt(); 
tree.root = tree.insert(tree.root, data); 
System.out.println(data + " inserted in the tree"); 
break; 
case 2: 
System.out.println("Enter the element to be deleted:"); 
int key = snScanner.nextInt(); 
tree.root = tree.deleteNode(tree.root, key); 
System.out.println(key + " deleted from the tree"); 
break; 
case 3: 
System.out.println("Preorder Traversal:"); 
tree.preOrder(tree.root); 
System.out.println(); 
break; 
case 4: 
System.out.println("Inorder Traversal:"); 
tree.inOrder(tree.root); 
System.out.println(); 
break; 
case 5: 
System.out.println("Postorder Traversal:"); 
tree.postOrder(tree.root); 
System.out.println(); 
break; 
case 6: 
System.exit(0); 
default: 
System.out.println("Invalid choice"); 
}}}} 