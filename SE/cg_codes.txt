1.DDA and bresen
#include <stdio.h>
#include <graphics.h>
#include <math.h>
void drawLineDDA(int x1, int y1, int x2, int y2) {
    int dx = x2 - x1;
    int dy = y2 - y1;
    int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);

    float xIncrement = (float)dx / (float)steps;
    float yIncrement = (float)dy / (float)steps;

    float x = x1, y = y1;

    for (int i = 0; i <= steps; i++) {
        putpixel(round(x), round(y), WHITE);
        x += xIncrement;
        y += yIncrement;
    }
}
void drawLineBresenham(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int x = x1, y = y1;
    int xIncrement = (x2 > x1) ? 1 : -1;
    int yIncrement = (y2 > y1) ? 1 : -1;
    int p = 2 * dy - dx;
    while (x != x2 || y != y2) {
        putpixel(x, y, WHITE);
        if (p >= 0) {
            y += yIncrement;
            p -= 2 * dx;
        }
        x += xIncrement;
        p += 2 * dy;
    }
}
int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");

    int x1 = 100, y1 = 100;
    int x2 = 400, y2 = 300;

    drawLineDDA(x1, y1, x2, y2);
    drawLineBresenham(x1, y1 + 50, x2, y2 + 50);

    getch();
    closegraph();
    return 0;
}

2.midpoint circle
#include <stdio.h>
#include <graphics.h>

void drawCircle(int xc, int yc, int radius) {
    int x = 0;
    int y = radius;
    int decisionParam = 1 - radius;

    while (x <= y) {
        delay(100);
        putpixel(xc + x, yc + y, WHITE);
        putpixel(xc + y, yc + x, WHITE);
        putpixel(xc - x, yc + y, WHITE);
        putpixel(xc - y, yc + x, WHITE);
        putpixel(xc + x, yc - y, WHITE);
        putpixel(xc + y, yc - x, WHITE);
        putpixel(xc - x, yc - y, WHITE);
        putpixel(xc - y, yc - x, WHITE);

        if (decisionParam < 0) {
            decisionParam += 2 * x + 3;
        } else {
            decisionParam += 2 * (x - y) + 5;
            y--;
        }

        x++;
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");

    int xc = 250; // x-coordinate of the center
    int yc = 250; // y-coordinate of the center
    int radius = 100;

    drawCircle(xc, yc, radius);

    getch();
    closegraph();
    return 0;
}

3.flood fill boundary fill

#include <stdio.h>
#include <graphics.h>

void boundaryFill4(int x, int y, int fill_color, int boundary_color) {
    if (getpixel(x, y) != boundary_color && getpixel(x, y) != fill_color) {
        delay(0.1);
        putpixel(x, y, fill_color);
        boundaryFill4(x + 1, y, fill_color, boundary_color);
        boundaryFill4(x - 1, y, fill_color, boundary_color);
        boundaryFill4(x, y + 1, fill_color, boundary_color);
        boundaryFill4(x, y - 1, fill_color, boundary_color);
    }
}

void floodFill4(int x, int y, int fill_color, int old_color) {
    if (getpixel(x, y) == old_color) {
        delay(0.1);
        putpixel(x, y, fill_color);
        floodFill4(x + 1, y, fill_color, old_color);
        floodFill4(x - 1, y, fill_color, old_color);
        floodFill4(x, y + 1, fill_color, old_color);
        floodFill4(x, y - 1, fill_color, old_color);
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");

    rectangle(100, 100, 300, 300); // Drawing a rectangle for boundary fill
    rectangle(400, 100, 600, 300); // Drawing a rectangle for flood fill

    // Boundary Fill
    int bx = 200; // x-coordinate inside the boundary
    int by = 200; // y-coordinate inside the boundary
    int fill_color =WHITE; // color to be filled
    int boundary_color = GREEN; // boundary color

    boundaryFill4(bx, by, fill_color, boundary_color);

    // Flood Fill
    int fx = 500; // x-coordinate inside the shape
    int fy = 200; // y-coordinate inside the shape
    int old_color = RED; // color to be replaced with fill color

     floodFill4(fx, fy, GREEN, getpixel(fx, fy));

    getch();
    closegraph();
    return 0;
}

4.Fractal

#include <graphics.h>
#include <conio.h>
#include<dos.h>
#include<iostream>

void sierpinski(int x1, int y1, int x2, int y2, int x3, int y3, int depth) {
    if (depth == 0) {
	// Base case: Draw the triangle
	line(x1, y1, x2, y2);
	delay(70);
	line(x2, y2, x3, y3);
	delay(70);
	line(x3, y3, x1, y1);
	delay(70);
    } else {
	// Recursive case: Divide the triangle into three smaller triangles and draw each one
	int xa = (x1 + x2) / 2;
	int ya = (y1 + y2) / 2;
	int xb = (x2 + x3) / 2;
	int yb = (y2 + y3) / 2;
	int xc = (x3 + x1) / 2;
	int yc = (y3 + y1) / 2;
	sierpinski(x1, y1, xa, ya, xc, yc, depth - 1);
	sierpinski(xa, ya, x2, y2, xb, yb, depth - 1);
	sierpinski(xc, yc, xb, yb, x3, y3, depth - 1);
    }
}

int main() {
    delay(5000);
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
    sierpinski(320, 50, 50, 430, 590, 430, 5);
    // Draw a Sierpinski triangle with vertices at (320, 50), (50, 430), and (590, 430) and a depth of 5
    getch();
    closegraph();
    return 0;
}

5.Bezier curve

#include <stdio.h>
#include <graphics.h>
#include<math.h>

void drawAxis() {
    // Draw x-axis
    line(0, getmaxy() / 2, getmaxx(), getmaxy() / 2);

    // Draw y-axis
    line(getmaxx() / 2, 0, getmaxx() / 2, getmaxy());
}

void drawBezierCurve(int x0, int y0, int x1, int y1, int x2, int y2, int x3, int y3) {
    double t;
    int x, y;

    for (t = 0.0; t <= 1.0; t += 0.001) {
        x = pow(1 - t, 3) * x0 + 3 * t * pow(1 - t, 2) * x1 + 3 * pow(t, 2) * (1 - t) * x2 + pow(t, 3) * x3;
        y = pow(1 - t, 3) * y0 + 3 * t * pow(1 - t, 2) * y1 + 3 * pow(t, 2) * (1 - t) * y2 + pow(t, 3) * y3;

        putpixel(x + getmaxx() / 2, getmaxy() / 2 - y, WHITE);
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");

    drawAxis();

    int x0 = -100, y0 = 0; // Starting point P0
    int x1 = -50, y1 = 100; // Control point P1
    int x2 = 50, y2 = -100; // Control point P2
    int x3 = 100, y3 = 0; // Ending point P3

    drawBezierCurve(x0, y0, x1, y1, x2, y2, x3, y3);

    getch();
    closegraph();
    return 0;
}

6.line clipping(cohen sutherland)

#include <stdio.h>
#include<graphics.h>

// Define region codes
#define INSIDE 0
#define LEFT 1
#define RIGHT 2
#define BOTTOM 4
#define TOP 8

// Define window boundaries
#define X_MIN 50
#define X_MAX 400
#define Y_MIN 50
#define Y_MAX 400

// Function to compute region code for a point (x, y)
int computeCode(int x, int y) {
    int code = INSIDE;

    if (x < X_MIN)
        code |= LEFT;
    else if (x > X_MAX)
        code |= RIGHT;
    if (y < Y_MIN)
        code |= BOTTOM;
    else if (y > Y_MAX)
        code |= TOP;

    return code;
}

// Function to perform Cohen-Sutherland line clipping
void cohenSutherland(int x1, int y1, int x2, int y2) {
    int code1 = computeCode(x1, y1);
    int code2 = computeCode(x2, y2);
    int accept = 0;

    while (1) {
        if (!(code1 | code2)) {
            // Both endpoints are inside the window
            accept = 1;
            break;
        } else if (code1 & code2) {
            // Both endpoints are outside the same region
            break;
        } else {
            // Line needs clipping
            int x, y;

            // Select the endpoint outside the window
            int codeOut = code1 ? code1 : code2;

            // Compute intersection point
            if (codeOut & TOP) {
                x = x1 + (x2 - x1) * (Y_MAX - y1) / (y2 - y1);
                y = Y_MAX;
            } else if (codeOut & BOTTOM) {
                x = x1 + (x2 - x1) * (Y_MIN - y1) / (y2 - y1);
                y = Y_MIN;
            } else if (codeOut & RIGHT) {
                y = y1 + (y2 - y1) * (X_MAX - x1) / (x2 - x1);
                x = X_MAX;
            } else {
                y = y1 + (y2 - y1) * (X_MIN - x1) / (x2 - x1);
                x = X_MIN;
            }

            // Replace the outside endpoint with the intersection point
            if (codeOut == code1) {
                x1 = x;
                y1 = y;
                code1 = computeCode(x1, y1);
            } else {
                x2 = x;
                y2 = y;
                code2 = computeCode(x2, y2);
            }
        }
    }
    
    if (accept) {
	delay(2000);
	printf("Line after clipping: (%d, %d) to (%d, %d)\n", x1, y1, x2, y2);
    cleardevice();
    rectangle(X_MIN, Y_MIN, X_MAX, Y_MAX);
	line(x1,y1,x2,y2);
    } else {
	printf("Line rejected\n");
    }
}

int main() {
    // Test the algorithm
    int x1 = 30, y1 = 70, x2 = 120, y2 = 90;
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
    rectangle(X_MIN, Y_MIN, X_MAX, Y_MAX);
    delay(3000);
    line(x1,y1,x2,y2);
    getch();
    setcolor(getcolor());

    printf("Line before clipping: (%d, %d) to (%d, %d)\n", x1, y1, x2, y2);
    cohenSutherland(x1, y1, x2, y2);
    delay(2000);
    getch();
    delay(2000);
    closegraph();

    return 0;
}

7.Polygon cliipping  (sutherland hodgeman)

#include <stdio.h>
#include <conio.h>
#include <graphics.h>

// Function to clip a polygon using Sutherland-Hodgman algorithm
void sutherlandHodgman(int clipX[], int clipY[], int clipCount, int polyX[], int polyY[], int polyCount) {
    int x1, y1, x2, y2;

    for (int i = 0; i < clipCount; i++) {
        int nextIndex = (i + 1) % clipCount;
        int clipX1 = clipX[i];
        int clipY1 = clipY[i];
        int clipX2 = clipX[nextIndex];
        int clipY2 = clipY[nextIndex];

        int newPolyX[10], newPolyY[10], newPolyCount = 0;

        for (int j = 0; j < polyCount; j++) {
            int nextPolyIndex = (j + 1) % polyCount;
            x1 = polyX[j];
            y1 = polyY[j];
            x2 = polyX[nextPolyIndex];
            y2 = polyY[nextPolyIndex];

            int x, y;
            if (x2 - x1 != 0) {
                // Calculate the intersection point
                float m = (y2 - y1) / (float)(x2 - x1);
                y = y1 + (clipX1 - x1) * m;
            } else {
                y = y1;
            }

            // Check if the intersection point is inside the clip edge
            if (y >= clipY1 && y <= clipY2) {
                // If the previous point was outside, add the intersection point
                if (!(polyY[j] >= clipY1 && polyY[j] <= clipY2)) {
                    newPolyX[newPolyCount] = clipX1;
                    newPolyY[newPolyCount] = y;
                    newPolyCount++;
                }
                newPolyX[newPolyCount] = x2;
                newPolyY[newPolyCount] = y;
                newPolyCount++;
            } else if (polyY[j] >= clipY1 && polyY[j] <= clipY2) {
                // If the previous point was inside, add the intersection point
                x = x1 + (clipY1 - y1) / ((float)(y2 - y1) / (x2 - x1));
                newPolyX[newPolyCount] = x;
                newPolyY[newPolyCount] = clipY1;
                newPolyCount++;
            }
        }

        // Update the polygon with the new clipped points
        polyCount = newPolyCount;
        for (int k = 0; k < newPolyCount; k++) {
            polyX[k] = newPolyX[k];
            polyY[k] = newPolyY[k];
        }
    }

    // Draw the clipped polygon
    cleardevice();
    getch();
    setcolor(RED);
    for (int i = 0; i < polyCount; i++) {
        int nextIndex = (i + 1) % polyCount;
        line(polyX[i], polyY[i], polyX[nextIndex], polyY[nextIndex]);
    }
}

int main() {
        int gd = DETECT, gm;
    initgraph(&gd, &gm, "C:\\TC\\BGI");

    // Set the coordinates of the clip polygon
    int clipX[] = { 100, 200, 200, 100 };
    int clipY[] = { 100, 100, 200, 200 };
    int clipCount = sizeof(clipX) / sizeof(clipX[0]);

    // Set the coordinates of the polygon to be clipped
    int polyX[] = { 150, 250, 250, 150 };
    int polyY[] = { 150, 150, 250, 250 };
    int polyCount = sizeof(polyX) / sizeof(polyX[0]);
    // Draw the clip polygon
    setcolor(RED);
    for (int i = 0; i < clipCount; i++) {
        int nextIndex = (i + 1) % clipCount;
        line(clipX[i], clipY[i], clipX[nextIndex], clipY[nextIndex]);
    }

    // Draw the original polygon
    setcolor(WHITE);
    for (int i = 0; i < polyCount; i++) {
        int nextIndex = (i + 1) % polyCount;
        line(polyX[i], polyY[i], polyX[nextIndex], polyY[nextIndex]);
    }

    // Wait for a key press
    getch();

    // Clear the original polygon
    setcolor(getbkcolor());
    for (int i = 0; i < polyCount; i++) {
        int nextIndex = (i + 1) % polyCount;
        line(polyX[i], polyY[i], polyX[nextIndex], polyY[nextIndex]);
    }
   
    // Clip the polygon
    sutherlandHodgman(clipX, clipY, clipCount, polyX, polyY, polyCount);

    // Wait for a key press
    getch();

    closegraph();

    return 0;
}

6.2D transformations
 6.1: translation
        #include<conio.h>
#include<stdio.h>
#include<graphics.h>
int main(){
    int gd=DETECT,gm;
    int x1,y1,x2,y2;
    int tx,ty;
    initgraph(&gd,&gm,"C:\\TURBOC3\\BGI");
    printf("Enter Initial coordinates: ");
    scanf("%d %d",&x1,&y1);
    printf("Enter Final coordinates: ");
    scanf("%d %d",&x2,&y2);
    printf("Enter Translating factor for x and y coordinates: ");
    scanf("%d %d",&tx,&ty);
    setcolor(WHITE);
    line(x1+tx,y1+ty,x2+tx,y2+ty);
    getch();
    closegraph();
    return 0;
}
6.2:Rotation
    #include <stdio.h>
#include <graphics.h>
#include <math.h>

int main() {
    int gd = DETECT, gm;
    int x1, y1, x2, y2;
    double degree, radian;
    
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
    
    printf("Enter Initial coordinates: ");
    scanf("%d %d", &x1, &y1);
    
    printf("Enter Final coordinates: ");
    scanf("%d %d", &x2, &y2);
    
    printf("Enter degree to be rotated (Anticlockwise): ");
    scanf("%lf", &degree);
    
    printf("Original line: ");
    setcolor(WHITE);
    line(x1, y1, x2, y2);
    getch();
    
    radian = (degree * M_PI) / 180.0;
    int rx1, ry1, rx2, ry2;
    
    // Perform rotation using rotation matrix
    rx1 = (int) (x1 * cos(radian) - y1 * sin(radian));
    ry1 = (int) (x1 * sin(radian) + y1 * cos(radian));
    rx2 = (int) (x2 * cos(radian) - y2 * sin(radian));
    ry2 = (int) (x2 * sin(radian) + y2 * cos(radian));
    
    cleardevice();
    delay(1000);
    
    setcolor(WHITE);
    line(rx1, ry1, rx2, ry2);
    getch();
    
    closegraph();
    return 0;
}
6.3:Scaling
    #include <stdio.h>
#include <graphics.h>

int main() {
    int gd = DETECT, gm;
    int x1, y1, x2, y2, x3, y3;
    int sx, sy;
    
    initgraph(&gd, &gm, "C:\\TURBOC3\\BGI");
    
    printf("Enter Point A coordinates: ");
    scanf("%d %d", &x1, &y1);
    
    printf("Enter Point B coordinates: ");
    scanf("%d %d", &x2, &y2);
    
    printf("Enter Point C coordinates: ");
    scanf("%d %d", &x3, &y3);
    
    printf("Enter Scaling factor for x and y coordinates: ");
    scanf("%d %d", &sx, &sy);
    
    printf("Original triangle: ");
    setcolor(WHITE);
    line(x1, y1, x2, y2);
    line(x2, y2, x3, y3);
    line(x3, y3, x1, y1);
    getch();
    
    cleardevice();
    printf("Scaled triangle: ");
    setcolor(WHITE);
    line(x1 * sx, y1 * sy, x2 * sx, y2 * sy);
    line(x2 * sx, y2 * sy, x3 * sx, y3 * sy);
    line(x3 * sx, y3 * sy, x1 * sx, y1 * sy);
    getch();
    
    closegraph();
    return 0;
}



(shearing and reflection missing)