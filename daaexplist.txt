//1. Quick sort using DnC

#include<iostream>
#include<conio.h>
#include<vector>
using namespace std;

int partition(vector<int> &arr,int start,int end){
    int i = start - 1;
    int pivot = arr[end];

    for(int j = start; j < end; j++){
        if(arr[j] < pivot){
            i++;
            swap(arr[j],arr[i]);
        }
    }
    swap(arr[i+1],arr[end]);
    return i+1;
}
void quicksort(vector<int> &arr,int start,int end){
    //base case:
    if(start>=end){
        return;
    }
    //rec case
    int p = partition(arr,start,end);
    quicksort(arr,start,p-1);    
    quicksort(arr,p+1,end);    
}

int main(){
    int n;
    cout<<"Enter size: "<<endl;
    cin>>n;
    vector<int>arr(n,0);
    cout<<"Enter elements: "<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    quicksort(arr,0,n-1);
    cout<<"Sorted elements: "<<endl;
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}
Algorithm:
It chooses a pivot (basically any element but we will take the last element)
Partition the array into two parts : Elements less than pivot(left part) and Elements greater than pivot(right part) and the pivot comes in the middle of these two parts We do this using another function:
We do this by having two variables set i and j at -1 and 0
 Iterate through the unsorted array
 if the element at j is greater than pivot then increase j 
If the element at j is less than pivot then increase i then swap element at i and j.
Finally,swap pivot with i+1 element.
Recursively sort the left part and the right part of the array
The base case is that if the array consists of 1 or 0 elements then we just return

Average case Time complexity is O(N log N) and worst case is O(N^2)

//2.Selection Sort

#include<iostream>
#include<vector>
#include<conio.h>
using namespace std;


void selectionSort(vector<int> &arr){
    int n= arr.size();
    for(int pos=0;pos<n;pos++){
        int current = arr[pos];
        int minimum = pos;
            for(int j=pos+1;j<n;j++){
                if(arr[j]<arr[minimum]){
                    minimum = j;
                }
            }
        swap(arr[pos],arr[minimum]);
    }    
}

int main(){
    int n;
    cout<<"Enter size: "<<endl;
    cin>>n;
    vector<int>arr(n,0);
    cout<<"Enter elements: "<<endl;
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    selectionSort(arr);
    cout<<"Sorted elements: "<<endl;
    for(int i=0;i<n;i++){
        cout<<arr[i]<<" ";
    }
    return 0;
}
Basic idea is we repeatedly find the minimum element from the unsorted part of the array and put it at the beginning of the array.
Time Complexity O(N^2) 
Algorithm:
Initialize i to go from 0 to n 
The unsorted array is i+1 to n from which we will find the minimum element
Swap the element with the element at ith index

//3.nqueen
//It is the problem where we need to place n queen in NxN Chessboard such that
//no 2 queens attack each other
//Algorithm:
//1.Initialize i and j which tranverse through the 2d vector
//2.We use another function to check if we can place a queen
//in the current position(i,j) which checks for any queen at the diagonal,coloumn or at the row 
//of the current position
//3.Base case would be if i==n then return true 

#include<iostream>
#include<vector>
#include<conio.h>
using namespace std;

bool canPlace(int board[][8],int n,int x,int y){

    //Column
    for(int k=0;k<x;k++){
        if(board[k][y]==1){
            return false;
        }
    }
    //Left Diag 
    int i = x;
    int j = y;
    while(i>=0 and j>=0){
        if(board[i][j]==1){
            return false;
        }
        i--; j--;
    }

    //Right Diag
    i = x;
    j = y;
    while(i>=0 and j<n){
        if(board[i][j]==1){
            return false;
        }
        i--; j++;
    }
    return true;
}
bool Nqueen(int n,int board[][8],int i){

    //base case
    if(i==n){
        for(int k=0;k<n;k++){
        for(int l=0;l<n;l++){
            cout<<board[k][l]<<" ";
        }
        cout<<endl;
    }
        return true;
    }

    for(int j=0;j<n;j++){
        if(canPlace(board,n,i,j)){
            board[i][j]=1;
            bool sucess=Nqueen(n,board,i+1);
            if(sucess){
                return true;
            }
            board[i][j]=0;
        }
    }
    return false;

}

int main(){
    int board[8][8] = {0};
    int n;
    cout<<"Enter board size: "<<endl;
    cin>>n;
    Nqueen(n,board,0);
    return 0;

}

4.Sum Of Subset
#include <iostream>
#include<vector>
#include <bits/stdc++.h>
using namespace std;
bool isSubsetSum(int set[], int n, int sum,vector<int>&arr){
	if (sum == 0)
		return true;
	if (n == 0)
		return false;
	if (set[n - 1] > sum)
		return isSubsetSum(set, n - 1, sum,arr);
	if(isSubsetSum(set, n - 1, sum - set[n - 1],arr)){
		vector<int>::iterator it;
		it = find(arr.begin(),arr.end(), set[n - 1]);
		if(it==arr.end())
		arr.push_back(set[n - 1]);
	}
	return isSubsetSum(set, n - 1, sum,arr) || isSubsetSum(set, n - 1, sum - set[n - 1],arr);
}
int main(){
	int set[] = { 3, 34, 4, 12, 5, 2 };
	int sum = 6;
	int n = sizeof(set) / sizeof(set[0]);
	vector<int>arr;
	if (isSubsetSum(set, n, sum,arr)){
		cout << "Found a subset with given sum";
		cout<<endl<<"Subset: ";
		for(int i=0;i<arr.size();i++){
		cout<<arr[i]<<" ";
		}
	}
	else{
		cout << "No subset with given sum";
	}
	return 0;
}
Type of problem: Combinatorial optimization problem.
Problem definition: Given a set of positive integers and a target sum, find a 
subset of the integers that adds up to the target sum.
Time complexity: O(2^n), where n is the number of elements in the set.
Additional information: The Sum of Subset problem can be solved using a backtracking algorithm that 
explores all possible subsets of the given set. It is an example of a combinatorial optimization problem 
where the goal is to find an optimal solution from a set of feasible solutions.
Use a backtracking algorithm to explore all possible subsets.
At each step, include or exclude the current element and recursively explore the remaining elements.
If the current subset's sum matches the target sum, output the subset.
Time complexity: O(2^n), where n is the number of elements in the set.

5.Fractional Knapsack
#include <iostream>
#include<algorithm>
#include <vector>
using namespace std;
bool cmp(vector<int> &a, vector<int> &b) {
	double r1 = (double)a[1] / (double)a[0];
	double r2 = (double)b[1] / (double)b[0];
	return r1 > r2;
}

double fractionalKnapsack(int W,vector<vector<int>>&item, int N) {
	sort(item.begin(), item.end(), cmp);
	double finalvalue = 0.0;

	for (int i = 0; i < N; i++)
	{
		if (item[i][0] <= W)
		{
			W -= item[i][0];
			finalvalue += item[i][1];
		}
		else
		{
			finalvalue += item[i][1] * ((double)W / (double)item[i][0]);
			break;
		}
	}
	return finalvalue;
}

int main() {
	int W = 50;
	vector<vector<int>>item = {
		{10,60},
		{20,100},
		{30,120}
	};
	int n =3;
	cout << "Maximum Profit is : "<<fractionalKnapsack(W, item, n);
	return 0;
}
Calculate the value-to-weight ratio for each item.
Sort the items in descending order based on the value-to-weight ratio.
Take items starting from the highest value-to-weight ratio until the knapsack capacity is reached.
If an item cannot fit entirely, take a fraction of it to fill the remaining capacity.
Time complexity: O(n log n), where n is the number of items.
Type of problem: Optimization problem.
Problem definition: Given a set of items with values and weights, determine the most valuable combination of items to fit within a knapsack of limited capacity.
Time complexity: O(n log n), where n is the number of items.
Additional information: Fractional Knapsack allows taking fractions of 
items, unlike 0/1 Knapsack where items are selected 
entirely or not at all. Greedy algorithm based on 
value-to-weight ratio is used to solve this problem.
6.Floyd Warshalll
#include <iostream>
using namespace std;

#define V 4
#define INF 99999

void printSolution(int dist[][V]) {
	cout << "The following matrix shows the shortest distances between every pair of vertices \n";
	for (int i = 0; i < V; i++) {
		for (int j = 0; j < V; j++) {
			if (dist[i][j] == INF)
				cout << "INF" << " ";
			else
				cout << dist[i][j] << " ";
		}
		cout << endl;
	}
}

void floydWarshall(int dist[][V]) {
	int i, j, k;
	for (k = 0; k < V; k++) {
		for (i = 0; i < V; i++) {
			for (j = 0; j < V; j++) {
				if (dist[i][j] > (dist[i][k] + dist[k][j]) && (dist[k][j] != INF && dist[i][k] != INF))
					dist[i][j] = dist[i][k] + dist[k][j];
			}
		}
	}
	printSolution(dist);
}

int main() {
	int graph[V][V] = { { 0, 5, INF, 10 },
						{ INF, 0, 3, INF },
						{ INF, INF, 0, 1 },
						{ INF, INF, INF, 0 } };
	floydWarshall(graph);
	return 0;
}
Create a 2D distance matrix and initialize it with the graph's edge weights.
Iterate through all pairs of vertices and update the distance matrix if a shorter path is found through an intermediate vertex.
Time complexity: O(V^3), where V is the number of vertices.
Type of problem: All-pairs shortest path problem.
Problem definition: Given a weighted graph, find the shortest distances between all pairs of vertices.
Time complexity: O(V^3), where V is the number of vertices.
Additional information: Floyd Warshall algorithm handles both positive and 
negative edge weights but does not handle negative cycles. 
It is used in network routing protocols and to solve 
problems related to transitive closure and connected 
components.
7.Longest Common Subsequence
#include <iostream>
#include <string>
using namespace std;

string lcs(string X, string Y, int m, int n) {
    if (m == 0 || n == 0) {
        return "";
    } else if (X[m-1] == Y[n-1]) {
        return lcs(X, Y, m-1, n-1) + X[m-1];
    } else {
        string lcs1 = lcs(X, Y, m, n-1);
        string lcs2 = lcs(X, Y, m-1, n);
        if (lcs1.length() > lcs2.length()) {
            return lcs1;
        } else {
            return lcs2;
        }
    }
}

int main() {
    string S1 = "AGGTAxBfgfgfa";
    string S2 = "GXTXAxYBlla";
    string lcs_str = lcs(S1, S2, S1.length(), S2.length());
    cout << "Length of LCS is " << lcs_str.length() << endl;
    cout << "Longest common subsequence is: " << lcs_str << endl;
    return 0;
}
Type of problem: Dynamic programming problem.
Problem definition: Given two sequences, find the longest subsequence that appears in both sequences.
Time complexity: O(m * n), where m and n are the lengths of the two sequences.
Additional information: Dynamic Programming is used to solve this problem by building a table that 
stores the lengths of common subsequences. LCS has applications in DNA sequence alignment, file difference checking, and more.
Create a table to store the lengths of common subsequences.
Iterate through the sequences and fill the table based on the characters' matches.
Trace back the table to find the longest common subsequence.
Time complexity: O(m * n), where m and n are the lengths of the sequences.

8.Dijkstra Algorithm
#include <iostream>
#include <vector>
#include <limits>

const int V = 5;
const int INF = std::numeric_limits<int>::max();

void dijkstra(const std::vector<std::vector<int>>& graph, int src)
{
    std::vector<int> dist(V, INF);
    std::vector<bool> visited(V, false);
    dist[src] = 0;

    for (int count = 0; count < V - 1; ++count)
    {
        int u = -1;
        for (int v = 0; v < V; ++v)
        {
            if (!visited[v] && (u == -1 || dist[v] < dist[u]))
                u = v;
        }

        visited[u] = true;

        for (int v = 0; v < V; ++v)
        {
            if (!visited[v] && graph[u][v] != INF && dist[u] != INF && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
        }
    }

    std::cout << "Vertex \t Distance from Source" << std::endl;
    for (int i = 0; i < V; ++i)
        std::cout << i << "\t\t" << dist[i] << std::endl;
}

int main()
{
    std::vector<std::vector<int>> graph = {
        {0, 3, 2, INF, INF},
        {3, 0, INF, 4, INF},
        {2, INF, 0, 3, INF},
        {INF, 4, 3, 0, 2},
        {INF, INF, INF, 2, 0}
    };

    dijkstra(graph, 0);
    return 0;
}
Type of problem: Single-source shortest path problem.
Problem definition: Given a weighted graph and a source vertex, find the shortest paths from the source 
vertex to all other vertices.
Time complexity: O((V + E) log V) using a priority queue or a min-heap.
Additional information: Dijkstra's Algorithm guarantees correct results for graphs with
non-negative edge weights. It can be used in GPS navigation systems, network routing, and other applications.
Algorithm:
Create a set of unvisited vertices and set the distance to the source vertex as 0 and all other distances as infinity.
While there are unvisited vertices:
Choose the vertex with the minimum distance from the set of unvisited vertices.
Update the distances of its neighboring vertices if a shorter path is found.
Time complexity: O((V + E) log V) using a priority queue or a min-heap.