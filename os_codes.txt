//1.cpu scheduling
#include<iostream>
#include<vector>
using namespace std;

void fcfs(vector<int>&arr){
    cout<<"Waiting Time : "<<endl;
    int currTime = 0;
    int avgWait = 0;
    int avgTurn = 0;
    for(int i = 0; i < arr.size(); i++){
        cout<<"P"<<i<<endl<<"Waiting Time: "<<currTime<<endl;
        cout<<"Turn Around Time: "<<currTime+arr[i]<<endl;
        avgWait += currTime;
        avgTurn += currTime+arr[i];
        currTime += arr[i]; 
    }
    cout<<endl;
    cout<<"Average Waiting Time : ";
    cout<<avgWait/arr.size()<<endl;
    cout<<"Average TurnAround Time : ";
    cout<<avgTurn/arr.size()<<endl;
}
int getSmolIndex(vector<int>&arr,int i){
    for(int j=0;j<arr.size();j++){
        if(arr[j]<arr[i]) i=j;
    }
    return i;
}
void sjf(vector<int>& arr){
    int currTime = 0;
    int avgWait = 0;
    int avgTurn = 0;
    for(int i=0;i<arr.size();i++){
        int shortest = getSmolIndex(arr,i);
        int currBurst = arr[shortest];
        cout<<"P"<<shortest<<endl<<"Waiting Time : "<<currTime<<endl;
        cout<<"TurnAround Time : "<<currBurst+currTime<<endl;
        avgWait += currTime;
        avgTurn += currTime+currBurst;
        currTime += currBurst;
        arr[shortest] = 9999; 
    }
    cout<<endl;
    cout<<"Average Waiting Time : ";
    cout<<avgWait/arr.size()<<endl;
    cout<<"Average TurnAround Time : ";
    cout<<avgTurn/arr.size()<<endl;
}
int main(){
    int n;
    cout<<"Enter No. of processes : ";
    cin>>n;
    cout<<"Enter Burst time : ";
    vector<int>arr(n);
    for (int i = 0; i < n; i++) cin>>arr[i];
    cout<<"By FCFS algorithm: "<< endl;
    fcfs(arr);
    cout<<endl;
    cout<<"By SJF algorithm: "<< endl;
    sjf(arr);
    return 0;
}

//2.page replacement policy
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
void fifo(int n,int frameSize,vector<int>pages,vector<int>frames){
    int hit=0;
    int j=0;
    for(int i=0; i<n; i++){
            if(find(frames.begin(),frames.end(),pages[i])!=frames.end()){
                hit++;
            }
            else{
                frames[j] = pages[i];
                j++;
                if(j==frameSize) j=0;
            }
                cout<<pages[i]<<"\t";
            for(int k=0;k<frameSize;k++){
                cout<<frames[k]<<" ";
            }
            cout<<endl;
    }
    cout<<endl;
    cout<<"Number of Hits: "<<hit<<endl;
    cout<<"Number of Page Faults: "<<n-hit<<endl;
    cout<<"Hit Ratio: "<<(float)hit/n<<endl;
}

void lru(int n,int frameSize,vector<int>pages,vector<int>frames){
    int hit=0;
    int j=0;
    vector<int>recent(frameSize);
     for(int i=0; i<n; i++){
            if(find(frames.begin(),frames.end(),pages[i])!=frames.end()){
                hit++;
            }
            else{
                if(j<frames.size()){
                 frames[j] = pages[i];
                }
                else{
                int minIndex = distance(recent.begin(), min_element(recent.begin(),recent.end()));
                frames[minIndex] = pages[i];
                }
            }
            recent[j%frameSize] = i;
            j++;
                cout<<pages[i]<<"\t";
            for(int k=0;k<frameSize;k++){
                cout<<frames[k]<<" ";
            }
            cout<<endl;
    }
    cout<<endl;
    cout<<"Number of Hits: "<<hit<<endl;
    cout<<"Number of Page Faults: "<<n-hit<<endl;
    cout<<"Hit Ratio: "<<(float)hit/n<<endl;

}
int main(){
    int n;
    cout<<"Enter number of pages : ";
    cin >> n;
    cout<<"Enter all pages : ";
    vector<int>pages(n);   
    for(int i=0; i<n; i++) cin>>pages[i];
    cout<<"Enter frame size : ";
    int frameSize;
    cin>>frameSize;
    vector<int>frames(frameSize,0);
    cout<<endl;
    cout<<"Using FIFO Page Replacement Policy : "<<endl;
    cout<<"Page\tFrames"<<endl;
    cout<<endl;
    fifo(n,frameSize,pages,frames);
    cout<<endl;
    cout<<"Using LRU Page Replacement Policy : "<<endl;
    cout<<"Page\tFrames"<<endl;
    lru(n,frameSize,pages,frames);
    cout<<endl;
    return 0;
}


//3.Dynamic partitioning 
#include <iostream>
#include <vector>

using namespace std;

void firstFit(vector<int>& blockSizes, vector<int>& processSizes) {
    int m = blockSizes.size();
    int n = processSizes.size();

    // Create a vector to store the allocation status of each process
    vector<int> allocation(n, -1);

    // Iterate over each process
    for (int i = 0; i < n; i++) {
        // Find the first block that can accommodate the current process
        for (int j = 0; j < m; j++) {
            if (blockSizes[j] >= processSizes[i]) {
                // Allocate the process to the block
                allocation[i] = j;

                // Reduce the available space in the block
                blockSizes[j] -= processSizes[i];

                // Process allocation successful, move to the next process
                break;
            }
        }
    }

    // Print the allocation status
    cout << "Process No.\tProcess Size\tBlock No.\n";
    for (int i = 0; i < n; i++) {
        cout << i + 1 << "\t\t" << processSizes[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1;
        else
            cout << "Not Allocated";
        cout << endl;
    }
}


void bestFit(vector<int> blockSizes, const vector<int>& processSizes) {
    int m = blockSizes.size();
    int n = processSizes.size();

    // Create a vector to store the allocation status of each process
    vector<int> allocation(n, -1);

    // Iterate over each process
    for (int i = 0; i < n; i++) {
        int bestBlockIndex = -1;
        int minFragmentation = 9999;

        // Find the best block that can accommodate the current process
        for (int j = 0; j < m; j++) {
            if (blockSizes[j] >= processSizes[i] && blockSizes[j] - processSizes[i] < minFragmentation) {
                bestBlockIndex = j;
                minFragmentation = blockSizes[j] - processSizes[i];
            }
        }

        // Allocate the process to the best block
        if (bestBlockIndex != -1) {
            allocation[i] = bestBlockIndex;
            blockSizes[bestBlockIndex] -= processSizes[i];
        }
    }

    // Print the allocation status
    cout << "Process No.\tProcess Size\tBlock No.\n";
    for (int i = 0; i < n; i++) {
        cout << i + 1 << "\t\t" << processSizes[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1;
        else
            cout << "Not Allocated";
        cout << endl;
    }
}

int main() {
    // Example usage
    vector<int> blockSizes = {100, 500, 200, 300, 600};
    vector<int> processSizes = {212, 417, 112, 426};

    //firstFit(blockSizes, processSizes);
     bestFit(blockSizes, processSizes);

    return 0;
}

//4. Banker algorithm
#include<iostream>
#include<vector>
using namespace std;
void bankerAlgo(int n,vector<int>&alloc,vector<int>&maxx,int available,vector<int>&need){
    int iteration=1;
    int count=n-1;
    int j = 0;
    vector<int>seq(n);
    while(count>0){
        cout<<"Iteration "<<iteration<<" : "<<endl;
    for(int i=0;i<n;i++){
        if(need[i]==9999){
            count--;
            continue;    
        } 
        cout<<"P"<<i<<" : ";
        if(need[i]>available) cout<<"Not Safe!"<<endl;
        else{
            seq[j]=i;
            j++;
            cout<<"Safe!!"<<endl;
            available+=alloc[i];
            cout<<"  Currently available : "<<available<<endl;
            need[i]=9999;
        }
      }
        iteration++;
    }
    cout<<endl<<"Safe Sequence: ";
    for(int i=0;i<n;i++){
        cout<<"P"<<seq[i]<<" ";
    }
}
int main(){
    int n;
    cout<<"Enter No. of processes : ";
    cin>>n;
    cout<<"Enter Allocation of each : ";
    vector<int>alloc(n);
    for(int i=0; i<n; i++) cin>>alloc[i];
    cout<<"Enter Max of each : ";
    vector<int>maxx(n);
    for(int i=0; i<n; i++) cin>>maxx[i];
    int avaiable;
    cout<<"Enter Available : ";
    cin>>avaiable;
    cout<<endl<<"Using Banker's Algorrithm : "<<endl;
    cout<<"Need Matrix : "<<endl;
    vector<int>need(n);
    for(int i=0; i<n; i++) {
       cout<<" "<<"P"<<i<<" ";
        need[i] = maxx[i] - alloc[i] ;
        cout<<need[i]<<endl;
    }
    bankerAlgo(n,alloc,maxx,avaiable,need);
    return 0;
}

//5.disk scheduling algorithm
#include<iostream>
#include<vector>
#include<algorithm>
#include<cmath>
using namespace std;

void fcfs(int n,vector<int> &seq,int head){
    int current = head;
    int seekCount = 0;
    cout<<"FCFS Seek Sequence is : ";
    for(int i=0; i<n; i++){
            seekCount+= abs(seq[i] - current);
            current = seq[i];
            cout<<seq[i]<<" ";
    }
    cout<<endl<<"Total Seek count is : "<<seekCount<<endl;
}

void sstf(int n, vector<int>& seq, int head) {
    cout << "SSTF Seek Sequence is : ";
    int current = head;
    int seekCount = 0;
    cout<<current<<" ";
    while (!seq.empty()) {
        int minDiff = 9999;
        int minIndex = -1;

        // Find the track with the smallest absolute difference
        for (int i = 0; i < seq.size(); i++) {
            int diff = abs(seq[i] - current);
            if (diff < minDiff) {
                minDiff = diff;
                minIndex = i;
            }
        }

        // Update current position and remove the chosen track from the sequence
        current = seq[minIndex];
        seekCount += minDiff;
        cout << current << " ";
        seq.erase(seq.begin() + minIndex);
    }
    
    cout << endl;
    cout << endl << "Total Seek count is: " << seekCount << endl;
}


int main(){
    int n;
    cout<<"Enter number of disk tracks: ";
    cin >> n;
    cout<<"Enter disk track numbers: ";
    vector<int>seq(n);
    for(int i=0; i<n; i++) cin>>seq[i];
    int head;
    cout<<"Enter initial head position: ";
    cin>>head;

   // fcfs(n,seq,head);
    sstf(n,seq,head);
    return 0;
}

//6.Dining Philosopher
#include<stdio.h>
int p[5];
int ch[5];
void signal(int z){
    int j=(z+1)%5;
    p[z]=0;
    ch[z]=0;
    ch[j]=0;
}
void wait(int y){
    int r = (y+1)%5;
    if((ch[y]==0)&&(ch[r]==0)){
        p[y]=1;
        ch[y]=1;
        ch[r]=1;   
    }
    else if(p[y]==1){
        int w;
        printf("Do you want to Philosopher %d to stop eating",y);
        scanf("%d",&w);
        if(w==1){
         signal(y);
        } 
    }
    else{
        printf("Chopstick %d and %d are busy\n",y,r);
        printf("Philosopher %d has to wait \n",y);
    }
}
int main(){
    int u;
    for(int i = 0; i < 5; i++){
        p[i] = 0 ;
        ch[i] = 0 ;
    }

    do{
    for(int i = 0; i < 5; i++){
        if(p[i] == 0){
            printf("Philosopher %d is thinking \n", i);
        }
        else{
            printf("Philosopher %d is eating \n", i);
        }
    }
    int s;
    printf("Which Philosopher wants to eat\n");
    scanf("%d", &s);
    wait(s);
    printf("Do you want to continue? Press 1\n");
    scanf("%d", &u);
    }while(u==1);
    return 0;
}
